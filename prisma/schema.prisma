generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  icon        String      @default("Target") // Default task icon
  categoryId  Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      String      @default("active") // Changed from "not_started"
  category    TaskCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  dailyWorks  DailyWork[]
}

model DailyWork {
  id        Int      @id @default(autoincrement())
  taskId    Int
  date      DateTime @db.Date
  totalTime Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, date])
}

model TaskCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  categoryId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  NoteCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model NoteCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]
}

model Habit {
  id        Int      @id @default(autoincrement())
  name      String
  period    String   @default("40") // "40" or "100"
  icon      String   @default("Target") // Default habit icon
  categoryId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category  HabitCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  days      HabitDay[]
}

model HabitCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habits    Habit[]
}

model HabitDay {
  id        Int      @id @default(autoincrement())
  habitId   Int
  day       Int      // Day number (1-40 or 1-100)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, day])
}

// Agenda Models
model AgendaSheet {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  icon        String        @default("FileText")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  columns     AgendaColumn[]
  rows        AgendaRow[]
}

model AgendaColumn {
  id           Int         @id @default(autoincrement())
  sheetId      Int
  name         String
  type         String      @default("text") // text, number, email, url, date, etc.
  order        Int         @default(0)
  required     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  sheet        AgendaSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  cellValues   AgendaCell[]

  @@unique([sheetId, name])
}

model AgendaRow {
  id        Int         @id @default(autoincrement())
  sheetId   Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  sheet     AgendaSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  cells     AgendaCell[]
}

model AgendaCell {
  id       Int          @id @default(autoincrement())
  rowId    Int
  columnId Int
  value    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  row      AgendaRow    @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column   AgendaColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
}
